<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0"> <title>Dialogue interactif</title>
<style>
  /* Styles Généraux pour Mobile-First */
  body {
    font-family: 'Courier New', monospace;
    background-color: #f8f8f8;
    color: #333;
    margin: 0;
    padding: 20px;
    line-height: 1.6;
    font-size: 1.1em;
    box-sizing: border-box;
    display: flex;
    flex-direction: column;
    align-items: center;
    min-height: 100vh;
  }

  /* Conteneur principal du texte */
  #typing-text {
    width: 100%;
    max-width: 600px;
    min-height: 250px;
    height: auto;
    background-color: #fff;
    border: 1px solid #ccc;
    padding: 20px;
    box-sizing: border-box;
    overflow: hidden;
    white-space: pre-wrap; /* Maintient les sauts de ligne et espaces */
    word-wrap: break-word; /* Casse les mots longs pour éviter le débordement */
  }

  /* Style du lien "Lancer les épreuves" */
  #continue-link {
    opacity: 0;
    display: block;
    width: fit-content;
    margin-top: 30px;
    padding: 12px 25px;
    background-color: #333;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: opacity 1s ease-in;
    text-align: center;
    font-size: 1.1em;
    cursor: pointer;
    -webkit-tap-highlight-color: transparent;
  }
  #continue-link.visible {
    opacity: 1;
  }

  /* Curseur clignotant - n'apparaît qu'à la toute fin du texte complet */
  .cursor {
    animation: blink 1s step-end infinite;
    display: inline-block;
    vertical-align: bottom;
    margin-left: 2px;
  }
  @keyframes blink {
    from, to { opacity: 1; }
    50% { opacity: 0; }
  }

  /* Media Queries pour les petits écrans (smartphones portrait) */
  @media (max-width: 500px) {
    body {
      padding: 15px;
      font-size: 1em;
    }
    #typing-text {
      min-height: 180px;
      padding: 15px;
    }
    #continue-link {
      padding: 10px 20px;
      font-size: 1em;
    }
  }

  /* Media Queries pour les écrans très petits */
  @media (max-width: 350px) {
    body {
      font-size: 0.9em;
    }
    #typing-text {
      min-height: 150px;
    }
  }

</style>
</head>
<body>

<div id="typing-text"></div>
<a href="https://shogunfever.github.io/Madame/szymbo" id="continue-link">Lancer les épreuves</a>

<script>
const textLines = [
  {text: "Madame,", delayAfter: 100},
  {text: "\n\nSoudainement, un doute m'a pris", delayAfter: 10},
  {text: "\nUne angoisse paranoïaque:", delayAfter: 10},
  {text: "\nEt si depuis le début", delayAfter: 200},
  {text: "\nJ'écrivais à un... robot?", delayAfter: 2000},
  {text: "\nJe vous prie donc", delayAfter: 120},
  {text: "\nDe vous soumettres à un petit test", delayAfter: 100},
  {text: "\n\nVous êtes prête?", delayAfter: 1000}
];

const typingElement = document.getElementById('typing-text');
const continueLink = document.getElementById('continue-link');

let currentLineIndex = 0;
let currentCharIndex = 0;
let displayedText = ''; // Accumule le texte à afficher

function typeWriter() {
    // Si nous avons dépassé toutes les lignes, terminer.
    if (currentLineIndex >= textLines.length) {
        // Ajouter le curseur clignotant à la fin
        const cursorSpan = document.createElement('span');
        cursorSpan.classList.add('cursor');
        cursorSpan.textContent = '|';
        typingElement.appendChild(cursorSpan); // Ajoute au DOM existant
        
        // Afficher le lien
        continueLink.classList.add('visible');
        return; // Arrête la récursion
    }

    const currentLine = textLines[currentLineIndex];

    // S'assurer que currentLine et currentLine.text sont définis et que c'est une chaîne
    if (!currentLine || typeof currentLine.text !== 'string') {
        console.error("Erreur: La ligne de texte est indéfinie ou n'est pas une chaîne:", currentLine);
        // Si cela arrive, nous allons tenter de passer à la ligne suivante pour éviter la boucle infinie
        currentLineIndex++;
        currentCharIndex = 0;
        setTimeout(typeWriter, 50); // Petit délai avant de réessayer
        return;
    }

    // Si nous ne sommes pas à la fin de la ligne actuelle
    if (currentCharIndex < currentLine.text.length) {
        displayedText += currentLine.text.charAt(currentCharIndex); // Utilise charAt pour plus de sécurité
        typingElement.textContent = displayedText; // Met à jour le DOM
        
        currentCharIndex++;
        setTimeout(typeWriter, Math.random() * 50 + 30); // Vitesse de frappe variable
    } else {
        // Fin de la ligne actuelle, passer à la suivante après le délai spécifié
        currentLineIndex++;
        currentCharIndex = 0; // Réinitialiser l'index du caractère pour la nouvelle ligne
        setTimeout(typeWriter, currentLine.delayAfter);
    }
}

// Démarrer l'animation
setTimeout(typeWriter, 1000); // Laisse un petit délai avant de commencer
</script>

</body>
</html>
